Setting Up k3s cluster:
1.	We are not working on Raspberry Pi 4’s Terminal directly, instead we’ve SSHed into console (Terminal) access through Putty.

2.	At first change the hostnames of all the nodes you are going to use inside your cluster. As stated earlier, here we are using 2 Master and 4 Worker Nodes. So changed their hostnames accordingly.

3.	After changing hostnames on all nodes, we have added entry of hostnames and IP address of every node in “/etc/hosts” file, so that they can ping one another via hostname.
             
4.	Once ping is successful, update DHCP assigned IP addresses into static, also add Google’s DNS address entry as well.

5.	Then update and upgrade boards.

6.	Then edit “/boot/cmdline.text” file in order to enable container features on Raspbian Kernel. We added “cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory” at the end of file.

7.	Once done with editing file mentioned in #6, reboot all the boards to enable new features & configurations.

8.	Let’s initialize our 1st Master node. Run following commands as below:

export K3S_KUBECONFIG_MODE="644"
export INSTALL_K3S_CHANNEL="latest"
curl -sfL https://get.k3s.io |  sh -
 
K3S_KUBECONFIG_MODE="644" 
INSTALL_K3S_CHANNEL="latest"

9.	Generate new token or use the existing token from your primary Master node using which redundant Master and Worker nodes could join the cluster. To get the token run following command:
cat /var/lib/rancher/k3s/server/node-token
 
10.	Kill the current k3s process running on port 6443 of your 1st Master node. To do so run following command:
sudo systemctl stop k3s

11.	Run initialize cluster, run following command:
sudo K3S_TOKEN="<node-token>" k3s server --cluster-init
 
After executing above command, you will see a bunch of processes getting initialized. Let the command run for about 2 minutes and then you can press “ctrl+c” to skip errors.

12.	Once command is successfully executed, restart k3s service.
sudo systemctl restart k3s

In this way we have initialized k3s cluster and made 1st Master node ready.

13.	Now it’s time to add 2nd Master to cluster. Run following commands on your 2nd Master node.
export K3S_KUBECONFIG_MODE="644"
export INSTALL_K3S_CHANNEL="latest"
curl -sfL https://get.k3s.io |  sh –

Kill the k3s process running on port 6443 of your 2nd Master node by running:
sudo systemctl stop k3s

Then join your 2nd Master node to Master 1 by running:
sudo K3S_TOKEN="<node-token-from-master1>" k3s server --server https://<Master-1’s IP Address or hostname>:6443
Let the command run for about 2 minutes and then you can press “ctrl+c” to skip errors.
At the end restart k3s service by running following command:
sudo systemctl restart k3s

14.	This adds 2nd Master node to your k3s cluster, to verify the same run: 
kubectl get nodes
 
15.	Let’s add worker nodes to cluster now. Run following commands:
export K3S_KUBECONFIG_MODE="644"
export INSTALL_K3S_CHANNEL="latest"
export K3S_URL="https://<Master-1’s IP Address or hostname>:6443"
export K3S_TOKEN="<node-token-from-master1>"
curl -sfL https://get.k3s.io |  sh –

Execute same commands on all 4 worker nodes.

16.	Once done execute “kubectl get nodes” command to verify all workers nodes are added to cluster. In the output look for “ROLES” column, it will say master nodes have control-plane, etcd, master roles added while worker nodes don’t have any role specified.
 
17.	To check pods (from all namespaces) present inside cluster run “kubectl get pods -A” command.
 
18.	To check all Kubernetes Control Plane components run “kubectl get all -n kube-system” command.
 
Now our Kubernetes (k3s) Cluster setup is completed.
